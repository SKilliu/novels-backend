// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/admin/drop_all": {
            "delete": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Drop all users from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Drop all users",
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    }
                }
            }
        },
        "/api/admin/version": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Returns a client version for Andrion or iOS by platform name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get client version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "requested platform",
                        "name": "platform",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetVersionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Update client version info for requested platform",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Update client version",
                "parameters": [
                    {
                        "description": "body for a new version saving",
                        "name": "JSON",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateVersionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    }
                }
            }
        },
        "/api/competition/own/get/": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Get own competition by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competitions"
                ],
                "summary": "Get own competition",
                "parameters": [
                    {
                        "type": "string",
                        "description": "novel_id in db",
                        "name": "novel_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CompetitionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    }
                }
            }
        },
        "/api/competition/own/list": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Get competitions list by status, sorting and pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competitions"
                ],
                "summary": "Competitions list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "can be \u003cb\u003ewaiting_for_opponent\u003c/b\u003e, \u003cb\u003estarted\u003c/b\u003e, \u003cb\u003eexpired\u003c/b\u003e, \u003cb\u003efinished\u003c/b\u003e or can be skipped",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name of sorting field",
                        "name": "sort_field",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "asc or desc",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "limit of items on page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.CompetitionResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    }
                }
            }
        },
        "/api/competition/ready_for_vote": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Get novels pair for vote",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competitions"
                ],
                "summary": "Get novels for vote",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CompetitionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    }
                }
            }
        },
        "/api/competition/vote": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Vote for a one of two novels in competition",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competitions"
                ],
                "summary": "Vote for a novel",
                "parameters": [
                    {
                        "description": "body for a voting",
                        "name": "JSON",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.VoteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    }
                }
            }
        },
        "/api/edit-username": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Edit username",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Edit username",
                "parameters": [
                    {
                        "description": "body for edit username",
                        "name": "JSON",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.EditUsernameRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    }
                }
            }
        },
        "/api/guest-registration": {
            "post": {
                "description": "Sign in like a guest (without progress saving)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Guest sign in",
                "parameters": [
                    {
                        "description": "Body for guest sign in",
                        "name": "JSON",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GuestSignInRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    }
                }
            }
        },
        "/api/login": {
            "post": {
                "description": "Sign in with login and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Sign in",
                "parameters": [
                    {
                        "description": "Body for sign in",
                        "name": "JSON",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SignInRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    }
                }
            }
        },
        "/api/novel/create": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Create a new novel with title and content",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Novels"
                ],
                "summary": "Create a new novel",
                "parameters": [
                    {
                        "description": "body for a new novel creation",
                        "name": "JSON",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateNovelRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.NovelResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    }
                }
            }
        },
        "/api/novel/delete": {
            "delete": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Delete user novels by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Novels"
                ],
                "summary": "Delete novel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "novel id",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    }
                }
            }
        },
        "/api/novel/list": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Get novels list by search parameter, sorting and pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Novels"
                ],
                "summary": "Novels list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "search by any fields in datagrid",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name of sorting field",
                        "name": "sort_field",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "asc or desc",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "limit of items on page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.NovelResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    }
                }
            }
        },
        "/api/novel/update": {
            "put": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Update novel title or data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Novels"
                ],
                "summary": "Update a novel",
                "parameters": [
                    {
                        "description": "body for a novel updating",
                        "name": "JSON",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateNovelRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.NovelResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    }
                }
            }
        },
        "/api/registration": {
            "post": {
                "description": "User registraton by email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Sign up",
                "parameters": [
                    {
                        "description": "Body for sign up",
                        "name": "JSON",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SignUpRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    }
                }
            }
        },
        "/api/reset-user": {
            "put": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Reset all user progress and rate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Reset user",
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    }
                }
            }
        },
        "/api/reset_password_request": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Reset your account password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Reset password request",
                "parameters": [
                    {
                        "description": "email for reset password",
                        "name": "JSON",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    }
                }
            }
        },
        "/api/socials-login": {
            "post": {
                "description": "User login by socials (Facebook, Google, Apple, etc.). If user doesn't exist in DB, new account will be created.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Socials sign in",
                "parameters": [
                    {
                        "description": "body for sign up",
                        "name": "JSON",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SocialsSignInRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    }
                }
            }
        },
        "/api/user-info": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Get user info by user ID from bearer token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Get user info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Edit user info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Edit info",
                "parameters": [
                    {
                        "description": "body for edit info",
                        "name": "JSON",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.EditInfoRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrResp"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ErrResp": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "error": {
                    "type": "string",
                    "example": "INTERNAL_SERVER_ERROR"
                }
            }
        },
        "dto.AuthResponse": {
            "type": "object",
            "properties": {
                "avatarData": {
                    "type": "string",
                    "example": "avatar_data"
                },
                "dateOfBirth": {
                    "type": "integer",
                    "example": 12345672
                },
                "gender": {
                    "type": "string",
                    "example": "male"
                },
                "id": {
                    "type": "string",
                    "example": "some_id"
                },
                "membership": {
                    "type": "string",
                    "example": "some_info"
                },
                "rate": {
                    "type": "integer",
                    "example": 0
                },
                "token": {
                    "description": "Email       string ` + "`" + `json:\"email\" example:\"my@testmail.com\"` + "`" + `",
                    "type": "string",
                    "example": "someSuperseCretToken.ForuseRAuthoriZATIon"
                },
                "username": {
                    "type": "string",
                    "example": "awesome_user"
                }
            }
        },
        "dto.CompetitionResponse": {
            "type": "object",
            "properties": {
                "competitionStartedAt": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "integer",
                    "example": 121342424
                },
                "id": {
                    "type": "string"
                },
                "novel1": {
                    "$ref": "#/definitions/dto.NovelData"
                },
                "novel2": {
                    "$ref": "#/definitions/dto.NovelData"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "integer",
                    "example": 1654726235
                }
            }
        },
        "dto.CreateNovelRequest": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": "My awesome true story!"
                },
                "title": {
                    "type": "string",
                    "example": "My new novel"
                }
            }
        },
        "dto.EditInfoRequest": {
            "type": "object",
            "properties": {
                "avatarData": {
                    "type": "string"
                },
                "rate": {
                    "type": "integer"
                }
            }
        },
        "dto.EditUsernameRequest": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.GetVersionResponse": {
            "type": "object",
            "properties": {
                "version": {
                    "type": "string"
                }
            }
        },
        "dto.GuestSignInRequest": {
            "type": "object",
            "properties": {
                "deviceId": {
                    "type": "string",
                    "example": "thisIsMyDeviceId"
                }
            }
        },
        "dto.NovelData": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "integer",
                    "example": 121342424
                },
                "data": {
                    "type": "string",
                    "example": "My awesome true story!"
                },
                "id": {
                    "type": "string",
                    "example": "some_id"
                },
                "participatedInCompetition": {
                    "type": "boolean",
                    "example": false
                },
                "title": {
                    "type": "string",
                    "example": "My new novel"
                },
                "updatedAt": {
                    "type": "integer",
                    "example": 1654726235
                },
                "user": {
                    "$ref": "#/definitions/dto.UserData"
                }
            }
        },
        "dto.NovelResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "integer",
                    "example": 121342424
                },
                "data": {
                    "type": "string",
                    "example": "My awesome true story!"
                },
                "id": {
                    "type": "string",
                    "example": "some_id"
                },
                "participatedInCompetition": {
                    "type": "boolean",
                    "example": false
                },
                "title": {
                    "type": "string",
                    "example": "My new novel"
                },
                "updatedAt": {
                    "type": "integer",
                    "example": 1654726235
                }
            }
        },
        "dto.ResetPasswordRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "myemail@mail.com"
                }
            }
        },
        "dto.SignInRequest": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string",
                    "example": "test_login"
                },
                "password": {
                    "type": "string",
                    "example": "supersecretpassword"
                }
            }
        },
        "dto.SignUpRequest": {
            "type": "object",
            "properties": {
                "deviceId": {
                    "description": "Email    string ` + "`" + `json:\"email\"` + "`" + `",
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.SocialsSignInRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "social": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateNovelRequest": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": "My awesome true story!"
                },
                "id": {
                    "type": "string",
                    "example": "some_id"
                },
                "title": {
                    "type": "string",
                    "example": "My new novel"
                }
            }
        },
        "dto.UpdateVersionRequest": {
            "type": "object",
            "properties": {
                "platform": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "dto.UserData": {
            "type": "object",
            "properties": {
                "dateOfBith": {
                    "type": "integer",
                    "example": 12345672
                },
                "gender": {
                    "type": "string",
                    "example": "male"
                },
                "membership": {
                    "type": "string",
                    "example": "some_info"
                },
                "rate": {
                    "type": "integer",
                    "example": 0
                },
                "username": {
                    "type": "string",
                    "example": "awesome_user"
                }
            }
        },
        "dto.VoteRequest": {
            "type": "object",
            "properties": {
                "novel_id": {
                    "type": "string",
                    "example": "some-NovEL_ID"
                }
            }
        }
    },
    "securityDefinitions": {
        "bearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0.1",
	Host:        "165.227.207.77:8000",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Novels REST API",
	Description: "REST API for Novels app.\nNew in version:<br> - fixed bug with voting.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
