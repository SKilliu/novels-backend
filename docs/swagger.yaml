basePath: /
definitions:
  ErrResp:
    properties:
      code:
        example: 500
        type: integer
      error:
        example: INTERNAL_SERVER_ERROR
        type: string
    type: object
  dto.AuthResponse:
    properties:
      avatarData:
        example: avatar_data
        type: string
      dateOfBirth:
        example: 12345672
        type: integer
      gender:
        example: male
        type: string
      id:
        example: some_id
        type: string
      membership:
        example: some_info
        type: string
      rate:
        example: 0
        type: integer
      token:
        description: Email       string `json:"email" example:"my@testmail.com"`
        example: someSuperseCretToken.ForuseRAuthoriZATIon
        type: string
      username:
        example: awesome_user
        type: string
    type: object
  dto.CompetitionResponse:
    properties:
      competitionStartedAt:
        type: integer
      createdAt:
        example: 121342424
        type: integer
      id:
        type: string
      novel1:
        $ref: '#/definitions/dto.NovelData'
      novel2:
        $ref: '#/definitions/dto.NovelData'
      status:
        type: string
      updatedAt:
        example: 1654726235
        type: integer
    type: object
  dto.CreateNovelRequest:
    properties:
      data:
        example: My awesome true story!
        type: string
      title:
        example: My new novel
        type: string
    type: object
  dto.EditInfoRequest:
    properties:
      avatarData:
        type: string
      rate:
        type: integer
    type: object
  dto.EditUsernameRequest:
    properties:
      username:
        type: string
    type: object
  dto.GuestSignInRequest:
    properties:
      deviceId:
        example: thisIsMyDeviceId
        type: string
    type: object
  dto.NovelData:
    properties:
      createdAt:
        example: 121342424
        type: integer
      data:
        example: My awesome true story!
        type: string
      id:
        example: some_id
        type: string
      participatedInCompetition:
        example: false
        type: boolean
      title:
        example: My new novel
        type: string
      updatedAt:
        example: 1654726235
        type: integer
      user:
        $ref: '#/definitions/dto.UserData'
    type: object
  dto.NovelResponse:
    properties:
      createdAt:
        example: 121342424
        type: integer
      data:
        example: My awesome true story!
        type: string
      id:
        example: some_id
        type: string
      participatedInCompetition:
        example: false
        type: boolean
      title:
        example: My new novel
        type: string
      updatedAt:
        example: 1654726235
        type: integer
    type: object
  dto.ResetPasswordRequest:
    properties:
      email:
        example: myemail@mail.com
        type: string
    type: object
  dto.SignInRequest:
    properties:
      login:
        example: test_login
        type: string
      password:
        example: supersecretpassword
        type: string
    type: object
  dto.SignUpRequest:
    properties:
      deviceId:
        description: Email    string `json:"email"`
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  dto.SocialsSignInRequest:
    properties:
      id:
        type: string
      social:
        type: string
      token:
        type: string
    type: object
  dto.UpdateNovelRequest:
    properties:
      data:
        example: My awesome true story!
        type: string
      id:
        example: some_id
        type: string
      title:
        example: My new novel
        type: string
    type: object
  dto.UserData:
    properties:
      dateOfBith:
        example: 12345672
        type: integer
      gender:
        example: male
        type: string
      membership:
        example: some_info
        type: string
      rate:
        example: 0
        type: integer
      username:
        example: awesome_user
        type: string
    type: object
  dto.VoteRequest:
    properties:
      novel_id:
        example: some-NovEL_ID
        type: string
    type: object
host: 165.227.207.77:8000
info:
  contact: {}
  description: |-
    REST API for Novels app.
    New in version:<br> - added andpoint for deleteing all users from db
  title: Novels REST API
  version: 0.0.6
paths:
  /api/admin/drop_all:
    delete:
      consumes:
      - application/json
      description: Drop all users from the database
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrResp'
      security:
      - bearerAuth: []
      summary: Drop all users
      tags:
      - admin
  /api/competition/own/get/:
    get:
      consumes:
      - application/json
      description: Get own competition by ID
      parameters:
      - description: novel_id in db
        in: query
        name: novel_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CompetitionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrResp'
      security:
      - bearerAuth: []
      summary: Get own competition
      tags:
      - Competitions
  /api/competition/own/list:
    get:
      consumes:
      - application/json
      description: Get competitions list by status, sorting and pagination
      parameters:
      - description: can be <b>waiting_for_opponent</b>, <b>started</b>, <b>expired</b>,
          <b>finished</b> or can be skipped
        in: query
        name: status
        type: string
      - description: name of sorting field
        in: query
        name: sort_field
        type: string
      - description: asc or desc
        in: query
        name: sort_order
        type: string
      - description: page number
        in: query
        name: page
        type: string
      - description: limit of items on page
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.CompetitionResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrResp'
      security:
      - bearerAuth: []
      summary: Competitions list
      tags:
      - Competitions
  /api/competition/ready_for_vote:
    get:
      consumes:
      - application/json
      description: Get novels pair for vote
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CompetitionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrResp'
      security:
      - bearerAuth: []
      summary: Get novels for vote
      tags:
      - Competitions
  /api/competition/vote:
    post:
      consumes:
      - application/json
      description: Vote for a one of two novels in competition
      parameters:
      - description: body for a voting
        in: body
        name: JSON
        required: true
        schema:
          $ref: '#/definitions/dto.VoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrResp'
      security:
      - bearerAuth: []
      summary: Vote for a novel
      tags:
      - Competitions
  /api/edit-username:
    post:
      consumes:
      - application/json
      description: Edit username
      parameters:
      - description: body for edit username
        in: body
        name: JSON
        required: true
        schema:
          $ref: '#/definitions/dto.EditUsernameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrResp'
      security:
      - bearerAuth: []
      summary: Edit username
      tags:
      - Authentication
  /api/guest-registration:
    post:
      consumes:
      - application/json
      description: Sign in like a guest (without progress saving)
      parameters:
      - description: Body for guest sign in
        in: body
        name: JSON
        required: true
        schema:
          $ref: '#/definitions/dto.GuestSignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrResp'
      summary: Guest sign in
      tags:
      - Authentication
  /api/login:
    post:
      consumes:
      - application/json
      description: Sign in with login and password
      parameters:
      - description: Body for sign in
        in: body
        name: JSON
        required: true
        schema:
          $ref: '#/definitions/dto.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrResp'
      summary: Sign in
      tags:
      - Authentication
  /api/novel/create:
    post:
      consumes:
      - application/json
      description: Create a new novel with title and content
      parameters:
      - description: body for a new novel creation
        in: body
        name: JSON
        required: true
        schema:
          $ref: '#/definitions/dto.CreateNovelRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.NovelResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrResp'
      security:
      - bearerAuth: []
      summary: Create a new novel
      tags:
      - Novels
  /api/novel/delete:
    delete:
      consumes:
      - application/json
      description: Delete user novels by ID
      parameters:
      - description: novel id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrResp'
      security:
      - bearerAuth: []
      summary: Delete novel
      tags:
      - Novels
  /api/novel/list:
    get:
      consumes:
      - application/json
      description: Get novels list by search parameter, sorting and pagination
      parameters:
      - description: search by any fields in datagrid
        in: query
        name: search
        type: string
      - description: name of sorting field
        in: query
        name: sort_field
        type: string
      - description: asc or desc
        in: query
        name: sort_order
        type: string
      - description: page number
        in: query
        name: page
        type: string
      - description: limit of items on page
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.NovelResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrResp'
      security:
      - bearerAuth: []
      summary: Novels list
      tags:
      - Novels
  /api/novel/update:
    put:
      consumes:
      - application/json
      description: Update novel title or data
      parameters:
      - description: body for a novel updating
        in: body
        name: JSON
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateNovelRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.NovelResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrResp'
      security:
      - bearerAuth: []
      summary: Update a novel
      tags:
      - Novels
  /api/registration:
    post:
      consumes:
      - application/json
      description: User registraton by email and password
      parameters:
      - description: Body for sign up
        in: body
        name: JSON
        required: true
        schema:
          $ref: '#/definitions/dto.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrResp'
      summary: Sign up
      tags:
      - Authentication
  /api/reset_password_request:
    post:
      consumes:
      - application/json
      description: Reset your account password
      parameters:
      - description: email for reset password
        in: body
        name: JSON
        required: true
        schema:
          $ref: '#/definitions/dto.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrResp'
      security:
      - bearerAuth: []
      summary: Reset password request
      tags:
      - Authentication
  /api/socials-login:
    post:
      consumes:
      - application/json
      description: User login by socials (Facebook, Google, Apple, etc.). If user
        doesn't exist in DB, new account will be created.
      parameters:
      - description: body for sign up
        in: body
        name: JSON
        required: true
        schema:
          $ref: '#/definitions/dto.SocialsSignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrResp'
      summary: Socials sign in
      tags:
      - Authentication
  /api/user-info:
    get:
      consumes:
      - application/json
      description: Get user info by user ID from bearer token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrResp'
      security:
      - bearerAuth: []
      summary: Get user info
      tags:
      - Authentication
    put:
      consumes:
      - application/json
      description: Edit user info
      parameters:
      - description: body for edit info
        in: body
        name: JSON
        required: true
        schema:
          $ref: '#/definitions/dto.EditInfoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrResp'
      security:
      - bearerAuth: []
      summary: Edit info
      tags:
      - Authentication
securityDefinitions:
  bearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
